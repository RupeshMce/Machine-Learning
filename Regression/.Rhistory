#   print("Failed to Copy File")
# }else{
#   print("File Copied to Ec2")
# }
# }else{
#   print("Don't move the file")
# }
# source("Scripts/DailySalesMaster-DB.R")
#
# source("Scripts/uploaddatatodatabase.R")
#
# # Close All DB Connections ------------------------------------------------
suppressWarnings(invisible(lapply(dbListConnections(dbDriver(drv = "MySQL")), dbDisconnect)))
})
#rm(list = ls())
# dates_req<-c("2019-02-28")
# dates_req<-gsub("-","",dates_req)
# for (i in dates_req){
#   print(ymd(i))
#   date<-ymd(i)
#   source("Daily_Sales/DailySales.R")
# }
# Set Working Direectory --------------------------------------------------
suppressMessages({
setwd("~/Documents/R _Program/Scigil/Std Format/EC2_R_Program")
#setwd("/home/ubuntu/sicgil-excel/sicgil/EC2_R_Program")
# .libPaths("/home/whirldata/R/x86_64-pc-linux-gnu-library/3.5")
#rm(list = ls())
# Import Packages Needed --------------------------------------------------
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(xlsx))
suppressMessages(library(lubridate))
suppressMessages(library(jsonlite))
suppressMessages(library(Hmisc))
suppressMessages(library(hms))
suppressMessages(library(RMySQL))
# suppressMessages(library(mailR))
suppressMessages(library(stringr))
# Use Today's Date --------------------------------------------------------
date <- gsub("-", "", Sys.Date())
date<-"20190501"
# mail Config -------------------------------------------------------------
# frommail <- "whirlmailer@gmail.com","mpalani@whirldatascience.com"
#
# mail_passwd <- "Whirldata123@","M@n!071189"
frommail <- "mpalani@whirldatascience.com"
mail_passwd <- "7DZV21WkNXUwmdth"
# port<-25
#
# hostname<-"smtp.gmail.com"
mailto <- c(
"rmohanasundaram@whirldatascience.com",
"mkolangi@whirldatascience.com",
"mgowrishankar@whirldatascience.com",
"mpalani@whirldatascience.com",
"sselvaraj@whirldatascience.com")
# mailto <- c("rmohanasundaram@whirldatascience.com")
mail <- TRUE
move_file_to_ec2<-TRUE
# DB Config for master db---------------------------------------------------------------
username<-"whirldata"
passwd<-"whirldata123"
dbname<-"SCIGIL"
loaderdb="SicgilDataCollection"
host<-"35.174.190.216"
# DB Details of SCIGIL Database -------------------------------------------
scigil_username<-"whirldata"
scigil_passwd<-"whirldata1"
scigil_dbname<-"sicgil_apps_db"
scigil_host<-"180.179.33.212"
# File Name Reference -----------------------------------------------------
arumugam_file_name<-"AruMugamData"
recommendation_file_name<-"RecommendationFor_"
recommendation_file_name_venkat<-"RecommendationFor_Venkat_"
# Invoke the R scripts ----------------------------------------------------
# source("Scripts/OrderMaster.R")
#
# source("Scripts/DailySales.R")
#
# # source("Scripts/Daily_Sales_on_Region.R")
#
# source("Scripts/BackUp_Dispatch.R")
#
# source("Scripts/EC2_Arumugam.R")
#
# if(move_file_to_ec2){
# if(system(paste0("cp  Arumugam_Sheet/",arumugam_file_name,ymd(date),".xlsx /home/ubuntu/sicgil-excel/source/arumugam"))){
#   #print("Failed to Copy File")
# }else{
#  # print("File Copied to Ec2")
# }
# }
source("Scripts/Recommendation_version_4.R")
# if(move_file_to_ec2){
# if(system(paste0("scp -i PRA.pem Recommendation/",recommendation_file_name_venkat,ymd(date),".xlsx ubuntu@ec2-35-174-190-216.compute-1.amazonaws.com:/home/ubuntu/sicgil-excel/source/recommendation/"))){
#   print("Failed to Copy File")
# }else{
#   print("File Copied to Ec2")
# }
# }else{
#   print("Don't move the file")
# }
# source("Scripts/DailySalesMaster-DB.R")
#
# source("Scripts/uploaddatatodatabase.R")
#
# # Close All DB Connections ------------------------------------------------
suppressWarnings(invisible(lapply(dbListConnections(dbDriver(drv = "MySQL")), dbDisconnect)))
})
#rm(list = ls())
# dates_req<-c("2019-02-28")
# dates_req<-gsub("-","",dates_req)
# for (i in dates_req){
#   print(ymd(i))
#   date<-ymd(i)
#   source("Daily_Sales/DailySales.R")
# }
# Main Fuction for Recommendation -----------------------------------------
recommedation_main <- function(date) {
vehicle_capacity <- function(Qty) {
Qty<-Qty*1000
if (Qty <= 7000) {
return("6 t")
} else if (7000 < Qty & Qty < 12000) {
return("12 t")
} else if (12000 <= Qty & Qty <= 14000) {
return("13 t")
} else if (15000 <= Qty & Qty <= 16000) {
return("15 t")
} else if (16000 < Qty & Qty < 19000) {
return("18 t")
} else if (19000 <= Qty & Qty <= 20000) {
return("20 t")
} else if (20000 < Qty & Qty <= 25000) {
return("25 t")
} else{
return("")
}
}
sale_rate_update<-function(sheet1){
budget<-read_excel("Recommendation/March2019Budget.xlsx",sheet = "LiquidCO2")
# #print("cll")
for (i in sheet1$`Customer Id`){
#   #print(i)
if (i %in% budget$CustomerId){
try(sheet1$`Sale rate (Rs)`[which(sheet1$`Customer Id`==i)]<-budget$`Sale Rate`[which(budget$CustomerId==i)])
#  #print(i)
}else{
#print(paste0("Not Present ",i))
}
}
return(sheet1)
}
# Read the Last Day DailySales --------------------------------------------
sale_data <- read_excel(paste0("Daily_Sales/DailySales", ymd(date) - days(1), ".xlsx"))
# Read the Customers of Beverage Grades -----------------------------------
bev_grade_units <- read_excel("Recommendation/Beverage Grade Units.xlsx")
# Fetch the api Data ------------------------------------------------------
json_data <- fromJSON(paste0(
"http://www.tracerivms.com/sicgilapp/others/sales_api.php?orderFromDate=", gsub("-", "", (ymd(date) - days(30))),
"&orderFromTime=000000&orderToDate=", date, "&orderToTime=100000"
))
# Convert it into dataframe -----------------------------------------------
df <- as.data.frame(json_data)
data_df <- df %>% select(starts_with("Orders")) %>% setNames(gsub("^Orders.", "", names(.)))
names(data_df) <- capitalize(names(data_df))
data_df$OrderCreationDate <- ymd(data_df$OrderCreationDate)
data_df$ScheduledDeliveryDate <- ymd(data_df$ScheduledDeliveryDate)
data_df$ScheduledDispatchDate <- ymd(data_df$ScheduledDispatchDate)
data_df$OrderCreationTime <- gsub("^(\\d{2})(\\d{2})(\\d{2})$", "\\1:\\2:\\3", data_df$OrderCreationTime)
data_df$OrderCreationTime <- as.hms(data_df$OrderCreationTime)
# Filter the data ---------------------------------------------------------
data_df <- data_df %>% filter(ProductName != "Dry Ice") %>% filter(StatusCode != 4)
# Filter data for Current Date --------------------------------------------
data_df <- data_df %>%
filter(ScheduledDispatchDate == as.Date(gsub("^(\\d{4})(\\d{2})(\\d{2})", "\\1-\\2-\\3", date))) %>%
mutate(Grade = ifelse(grepl("Industrial", ProductName), "Industrial",
ifelse(grepl("Food", ProductName), "Food", "Industrial"))) %>%
select(CustomerId, CustomerName, Ordered_Quantity = Qty, ProductName, Grade)
data_df <- data_df %>% filter(str_count(CustomerId) > 2)
# Include the Beverage Grade ----------------------------------------------
for (i in intersect(data_df$CustomerId, bev_grade_units$CODE)){
data_df$Grade[data_df$CustomerId == i] <- "Beverage"
}
customergrade<-read.xlsx("Recommendation/Clients Master Data - 2019 11.03.19.xls",sheetIndex = 1)
customergrade$CODE<-as.character(customergrade$CODE)
customergrade$Grade<-as.character(customergrade$Grade)
for  (i in data_df$CustomerId){
if (i %in% customergrade$CODE){
#print(i)
data_df$Grade[data_df$CustomerId == i]<-customergrade$Grade[customergrade$CODE==i]
#print(customergrade$Grade[customergrade$CODE==i])
}
}
# Remove the unwanted space in ID -----------------------------------------
data_df$CustomerId <- str_trim(data_df$CustomerId)
# Read the file which has dispatch point for customers --------------------
loc_df <- read.xlsx("Recommendation/Top_3 Dispatch Point Avg_cost_per_kg_final.xlsx",sheetIndex = 1)
loc_df$Customer_Code<-as.character(loc_df$Customer_Code)
data_df[which(data_df$CustomerId == "SR000056"), "CustomerId"] <- "SR000057"
data_df <- data_df %>% left_join(loc_df, by = c("CustomerId" = "Customer_Code"))
data_df$Ordered_Quantity <- as.numeric(data_df$Ordered_Quantity) / 1000
data_df<-apply(data_df, 2, as.character)
#data_df[is.na(data_df)]<-as.character(data_df[is.na(data_df)])
data_df[is.na(data_df)] <- 0
data_df<-as.data.frame(data_df)
data_df <- data_df %>% select(CustomerId, CustomerName, Ordered_Quantity, Grade,
Location_1, Avg_Cost_Per_Kg, Distance)
data_df$Trip_Cost_1 <- 0
# Read Sale Rate data file ------------------------------------------------
sale_rate <- read_excel("Recommendation/Sale_Rate.xlsx")
sale_rate$CODE<-as.character(sale_rate$CODE)
data_df$CustomerId <-as.character(data_df$CustomerId)
data_df<-as.data.frame(data_df)
data_df <- data_df %>% left_join(sale_rate, by = c("CustomerId" = "CODE"))
order_df <- data_df %>%
mutate(Avg_Cost_Per_Kg = as.numeric(Avg_Cost_Per_Kg) * 1000 * as.numeric(Ordered_Quantity),
Sale_Value = as.numeric(Sale_Rate) * as.numeric(Ordered_Quantity) * 1000,
Total_Trip_Cost = as.numeric(Trip_Cost_1) + as.numeric(Avg_Cost_Per_Kg),
Contribution = as.numeric(Sale_Value) - as.numeric(Total_Trip_Cost))
# Read Customer Location Data ---------------------------------------------
customer_location <- read_excel("Recommendation/TopCustomerLocationUpdated.xlsx")
customer_location <- customer_location %>% select(`City, State`, ID)
order_df <- order_df %>% left_join(customer_location, by = c("CustomerId" = "ID"))
order_df$Stock_at_source <- 0
# Add Stock at Dispatch Point to each Customer ----------------------------
sale_data <- sale_data[-1]
grade_industrial <- order_df %>% filter(Grade == "Industrial")
sale_data_temp <- sale_data %>% select(Units, IG_STOCK, FOOD_GRADE_STOCK, TANK_STOCK, Beverage_Stock)
grade_industrial$Location_1<-as.character(grade_industrial$Location_1)
grade_industrial <- grade_industrial %>% left_join(sale_data_temp, by = c("Location_1" = "Units"))
grade_industrial <- grade_industrial %>%
group_by(Location_1, CustomerId) %>%
mutate(Stock = ifelse(IG_STOCK == 0, ifelse(FOOD_GRADE_STOCK == 0, Beverage_Stock, FOOD_GRADE_STOCK), IG_STOCK)) %>%
ungroup()
grade_food <- order_df %>% filter(Grade == "Food")
grade_food$Location_1<-as.character(grade_food$Location_1)
grade_food <- grade_food %>% left_join(sale_data_temp, by = c("Location_1" = "Units"))
grade_food <- grade_food %>%
group_by(Location_1, CustomerId) %>%
mutate(Stock = ifelse(FOOD_GRADE_STOCK == 0, Beverage_Stock, FOOD_GRADE_STOCK)) %>%
ungroup()
grade_Beverage_Stockerage <- order_df %>% filter(Grade == "Beverage")
grade_Beverage_Stockerage$Location_1<-as.character(grade_Beverage_Stockerage$Location_1)
grade_Beverage_Stockerage <- grade_Beverage_Stockerage %>% left_join(sale_data_temp, by = c("Location_1" = "Units"))
grade_Beverage_Stockerage <- grade_Beverage_Stockerage %>% group_by(Location_1, CustomerId) %>%
mutate(Stock = Beverage_Stock) %>%ungroup()
temp <- rbind(grade_Beverage_Stockerage, grade_food, grade_industrial)
order_df <- temp %>% select(everything(), "Stock_at_source" = Stock, -c(IG_STOCK, FOOD_GRADE_STOCK, TANK_STOCK, Beverage_Stock, Stock_at_source))
# Add extra cols to order file --------------------------------------------
order_df$Source <- 0
order_df$VechicleTonnageUsed <- 0
order_df$VechicleNumber <- 0
order_df$Remarks <- 0
order_df$con_kg <- 0
order_df$plan <- 0
# Select the required Cols ------------------------------------------------
order_df <- order_df %>%
select("Customer Id" = CustomerId, "Customer Name" = CustomerName, Grade,
"Location" = `City, State`, "Plan" = plan, Source, "Dispatch Point" = Location_1,
"Ordered Quantity (Tons)" = Ordered_Quantity,
"Stock at Dispatch Point (Tons)" = Stock_at_source, "Distance from Dispatch point (Km)" = Distance,
"Vechicle" = VechicleNumber, "Vehicle Capacity" = VechicleTonnageUsed,
"Sale rate (Rs)" = Sale_Rate, "Sale Value (Rs)" = Sale_Value, "Trip Cost 1(S-D)" = Trip_Cost_1,
"Trip Cost 2(D-C)" = Avg_Cost_Per_Kg, "Total Trip Cost (Rs)" = Total_Trip_Cost, "Net Sale Value (Rs)" = Contribution,
"Remarks(If any)" = Remarks, "Contribution/kg" = con_kg)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
#order_df[c(seq(8, 18, 1))] <- as.numeric(unlist(order_df[c(seq(8,18,1))]))
order_df$`Ordered Quantity (Tons)`<-as.numeric.factor(order_df$`Ordered Quantity (Tons)`)
order_df$`Stock at Dispatch Point (Tons)`<-as.numeric(order_df$`Stock at Dispatch Point (Tons)`)
order_df$`Distance from Dispatch point (Km)`<-as.numeric.factor(order_df$`Distance from Dispatch point (Km)`)
#order_df$`Vehicle Capacity`<-as.numeric(order_df$`Vehicle Capacity`)
order_df$`Sale rate (Rs)`<-as.numeric(order_df$`Sale rate (Rs)`)
order_df$`Sale Value (Rs)`<-as.numeric(order_df$`Sale Value (Rs)`)
order_df$`Net Sale Value (Rs)`<-as.numeric(order_df$`Net Sale Value (Rs)`)
order_df$`Sale Value (Rs)` <- floor(order_df$`Sale Value (Rs)`)
order_df$`Net Sale Value (Rs)` <- floor(order_df$`Net Sale Value (Rs)`)
order_df$Trans_cost_kg <- 0
order_df$Inward <- 0
order_df$Delivery_Cost <- 0
order_df$Net_Sale_Value_kg <- 0
order_df$COP_Kg <- 0
order_df$Whirldata <- 0
order_df$Mr.Arumugam <- 0
order_df$Mr.Vijay <- 0
order_df$Mr.Ravi <- 0
order_df$Vehicle_capacity <- 0
order_df_1 <- order_df
# Spilt the data into Two Sheets ------------------------------------------
sheet_1 <- order_df %>%
select(`Customer Id`, `Customer Name`, Grade, Location,
"Planned for fulfillment" = Plan,
Source, `Dispatch Point`, "Ordered Quantity(Tons)" = `Ordered Quantity (Tons)`,
`Stock at Dispatch Point (Tons)`, `Distance from Dispatch point (Km)`,
"Vehicle" = Vechicle, "Vehicle Capacity" = Vehicle_capacity, `Sale rate (Rs)`,
`Sale Value (Rs)`, "Trans. Cost/Kg for Stock Transfer (Rs)" = Trans_cost_kg,
"Inward Cost (Rs)" = Inward, "Delivery Cost (Rs)" = Delivery_Cost, `Total Trip Cost (Rs)`,
"Net Sale Value/Kg (Rs)" = Net_Sale_Value_kg, "COP/Kg (Rs)" = COP_Kg,
"Contribution/Kg (Rs)" = `Contribution/kg`, Whirldata, Mr.Arumugam, Mr.Vijay, Mr.Ravi)
sheet_1$Vehicle_capacity_selected<-0
inward_cost<-read_excel("Recommendation/Inward Cost Feb 19.xls")
for (i in seq(1:dim(sheet_1)[1])){
tryCatch({
sheet_1$Vehicle_capacity_selected[i]<-vehicle_capacity(sheet_1$`Ordered Quantity(Tons)`[i])
sheet_1$`Delivery Cost (Rs)`[i]<-pull(tail(inward_cost[sheet_1$Vehicle_capacity_selected[i]],1))
##print(sheet_1$`Delivery Cost (Rs)`[i])
sheet_1$`Delivery Cost (Rs)`[i]<-sheet_1$`Delivery Cost (Rs)`[i] * sheet_1$`Distance from Dispatch point (Km)`[i]
sheet_1$`Delivery Cost (Rs)`[i]<-sheet_1$`Delivery Cost (Rs)`[i]*2},
error = function(e){})
}
# sheet_1<-sale_rate_update(sheet_1)
# sheet_1$`Sale rate (Rs)`<-round(sheet_1$`Sale rate (Rs)`,2)
sheet_1$`Sale Value (Rs)`<-round(sheet_1$`Sale Value (Rs)`,2)
sheet_1$`Delivery Cost (Rs)`<-round(sheet_1$`Delivery Cost (Rs)`,2)
sheet_1$`Total Trip Cost (Rs)`<-round(sheet_1$`Total Trip Cost (Rs)`,2)
refer<-read_excel("Recommendation/SourceAllocated_CustomerMaster (2).xlsx",sheet = "Working for Unit Allocation")
for (i in sheet_1$`Customer Id`){
if (i %in% refer$`Customer ID`){
sheet_1$Source[sheet_1$`Customer Id`==i]<-refer$`Source Assigned`[refer$`Customer ID`==i]
sheet_1$`Sale rate (Rs)`[sheet_1$`Customer Id`==i]<-refer$`March Sale Rate`[refer$`Customer ID`==i]
sheet_1$`Dispatch Point`[sheet_1$`Customer Id`==i]<-refer$`Dispatch Point Assigned`[refer$`Customer ID`==i]
sheet_1$`Distance from Dispatch point (Km)`[sheet_1$`Customer Id`==i]<-refer$`Distance from Dispatch Point`[refer$`Customer ID`==i]
}else{
sheet_1$Source[sheet_1$`Customer Id`==i]<-"-"
sheet_1$`Sale rate (Rs)`[sheet_1$`Customer Id`==i]<-"-"
sheet_1$`Dispatch Point`[sheet_1$`Customer Id`==i]<-"-"
sheet_1$`Distance from Dispatch point (Km)`[sheet_1$`Customer Id`==i]<-"-"
}
}
write.xlsx(as.data.frame(sheet_1), paste0("Recommendation/",recommendation_file_name, ymd(date), ".xlsx"),
sheetName = "Recommendation", row.names = FALSE)
sheet_1<-sheet_1%>%select(`Customer Id`,`Customer Name`,Grade,Location,`Ordered Quantity(Tons)`,`Planned for fulfillment`,Source,`Dispatch Point`,Vehicle,`Vehicle Capacity`,`Stock at Dispatch Point (Tons)`,`Distance from Dispatch point (Km)`,Whirldata,Mr.Arumugam,Mr.Vijay,Mr.Ravi)
write.xlsx(as.data.frame(sheet_1), paste0("Recommendation/",recommendation_file_name_venkat, ymd(date), ".xlsx"),
sheetName = "Recommendation", row.names = FALSE)
# Sheet 2 Data ------------------------------------------------------------
decision <- order_df
decision$Trans_cost_kg <- 0
decision$Inward <- 0
decision$Delivery_Cost <- 0
decision$Net_Sale_Value_kg <- 0
decision$COP_Kg <- 0
decision <- decision %>%
select(`Customer Name`, Source, `Dispatch Point`, `Sale rate (Rs)`, `Sale Value (Rs)`,
"Trans. Cost/Kg for Stock Transfer (Rs)" = Trans_cost_kg, "Inward Cost (Rs)" = Inward,
"Delivery Cost (Rs)" = Delivery_Cost, `Total Trip Cost (Rs)`, `Net Sale Value (Rs)`,
"Net Sale Value/Kg (Rs)" = Net_Sale_Value_kg, "COP/Kg (Rs)" = COP_Kg, "Contribution/Kg (Rs)" = `Contribution/kg`
)
decision$`Sale rate (Rs)`<-round(decision$`Sale rate (Rs)`,2)
decision$`Sale Value (Rs)`<-round(decision$`Sale Value (Rs)`,2)
decision$`Total Trip Cost (Rs)`<-round(decision$`Total Trip Cost (Rs)`,2)
decision$`Net Sale Value (Rs)`<-round(decision$`Net Sale Value (Rs)`,2)
write.xlsx(as.data.frame(decision), paste0("Recommendation/",recommendation_file_name, ymd(date), ".xlsx"),
sheetName = "DecisionMakingParameters", row.names = FALSE, append = TRUE)
write.xlsx(as.data.frame(decision), paste0("Recommendation/",recommendation_file_name_venkat, ymd(date), ".xlsx"),
sheetName = "DecisionMakingParameters", row.names = FALSE,append = TRUE)
#
# sheet_2_df <- loc_df %>% filter(Customer_Code %in% order_df_1$`Customer Id`) %>%
#   select(Customer_Code, Location_1, Avg_Cost_Per_Kg, Distance,
#          Location_2, Avg_Cost_Per_Kg__1, Distance__1,
#          Location_3, Avg_Cost_Per_Kg__2, Distance__2)
sheet_2_df <- loc_df%>%filter(Customer_Code %in% order_df_1$`Customer Id`)%>%select(Customer_Code,Location_1,Avg_Cost_Per_Kg,Distance,Location_2,Avg_Cost_Per_Kg.1,Distance.1,Location_3,Avg_Cost_Per_Kg.2,Distance.2)
sheet_2 <- sheet_2_df %>%
left_join(order_df_1, by = c("Customer_Code" = "Customer Id")) %>%
select(Customer_Code, Location_1, Avg_Cost_Per_Kg, Distance, Location_2, Avg_Cost_Per_Kg.1, Distance.1, Location_3,
Avg_Cost_Per_Kg.2, Distance.2, `Ordered Quantity (Tons)`)
sheet_2_df <- sheet_2 %>%mutate(Cost_1 = `Ordered Quantity (Tons)` * 1000 * Avg_Cost_Per_Kg,
Cost_2 = `Ordered Quantity (Tons)` * 1000 * Avg_Cost_Per_Kg.1,
Cost_3 = `Ordered Quantity (Tons)` * 1000 * Avg_Cost_Per_Kg.2) %>%
select(Customer_Code, Location_1, Avg_Cost_Per_Kg, Cost_1, Distance, Location_2, Avg_Cost_Per_Kg.1, Cost_2, Distance.1,
Location_3, Avg_Cost_Per_Kg.2, Cost_3, Distance.2, `Ordered Quantity (Tons)`)
write.xlsx(as.data.frame(sheet_2_df), paste0("Recommendation/",recommendation_file_name, ymd(date), ".xlsx"),
sheetName = "Sheet2", row.names = FALSE, append = TRUE)
if (mail) {
mailquery=paste0("python3 sent_mail_form_python.py -from ",frommail," -passwd ",mail_passwd," -to ",paste0(mailto,collapse=',')," -path ",
paste0("Recommendation/",recommendation_file_name, ymd(date), ".xlsx")," -sub ",paste0("Recommendation--", ymd(date)))
system(mailquery)
# send.mail(from = frommail,
#           to = mailto,
#           subject = paste0("Recommendation for ", ymd(date)),
#           body = paste0("Based on DailySales ", ymd(date) - days(1), ".xlsx"),
#           smtp = list(host.name = hostname, port = port,
#                       user.name = frommail,
#                       passwd = mail_passwd, ssl = TRUE),
#           attach.files = paste0("Recommendation/",recommendation_file_name, ymd(date), ".xlsx"),
#           authenticate = TRUE,
#           send = TRUE)
}
}
recommedation_main(date)
date
vehicle_capacity <- function(Qty) {
Qty<-Qty*1000
if (Qty <= 7000) {
return("6 t")
} else if (7000 < Qty & Qty < 12000) {
return("12 t")
} else if (12000 <= Qty & Qty <= 14000) {
return("13 t")
} else if (15000 <= Qty & Qty <= 16000) {
return("15 t")
} else if (16000 < Qty & Qty < 19000) {
return("18 t")
} else if (19000 <= Qty & Qty <= 20000) {
return("20 t")
} else if (20000 < Qty & Qty <= 25000) {
return("25 t")
} else{
return("")
}
}
sale_rate_update<-function(sheet1){
budget<-read_excel("Recommendation/March2019Budget.xlsx",sheet = "LiquidCO2")
# #print("cll")
for (i in sheet1$`Customer Id`){
#   #print(i)
if (i %in% budget$CustomerId){
try(sheet1$`Sale rate (Rs)`[which(sheet1$`Customer Id`==i)]<-budget$`Sale Rate`[which(budget$CustomerId==i)])
#  #print(i)
}else{
#print(paste0("Not Present ",i))
}
}
return(sheet1)
}
sale_data <- read_excel(paste0("Daily_Sales/DailySales", ymd(date) - days(1), ".xlsx"))
bev_grade_units <- read_excel("Recommendation/Beverage Grade Units.xlsx")
json_data <- fromJSON(paste0(
"http://www.tracerivms.com/sicgilapp/others/sales_api.php?orderFromDate=", gsub("-", "", (ymd(date) - days(30))),
"&orderFromTime=000000&orderToDate=", date, "&orderToTime=100000"
))
df <- as.data.frame(json_data)
data_df <- df %>% select(starts_with("Orders")) %>% setNames(gsub("^Orders.", "", names(.)))
names(data_df) <- capitalize(names(data_df))
data_df$OrderCreationDate <- ymd(data_df$OrderCreationDate)
json_data <- fromJSON(paste0(
"http://www.tracerivms.com/sicgilapp/others/sales_api.php?orderFromDate=", gsub("-", "", (ymd(date) - days(30))),
"&orderFromTime=000000&orderToDate=", date, "&orderToTime=100000"
))
paste0(
"http://www.tracerivms.com/sicgilapp/others/sales_api.php?orderFromDate=", gsub("-", "", (ymd(date) - days(30))),
"&orderFromTime=000000&orderToDate=", date, "&orderToTime=100000"
)
json_data <- fromJSON(paste0(
"http://www.tracerivms.com/sicgilapp/others/sales_api.php?orderFromDate=", gsub("-", "", (ymd(date) - days(30))),
"&orderFromTime=000000&orderToDate=", date, "&orderToTime=100000"
))
women
df=women
df
colSums(df)
colSums(df)>24
df[,colSums(df)>24]
df[,colSums(df)>24]
df[,colSums(df)>976]
df[,which(colSums(df)>976)]
df[which(colSums(df)>976)]
q()
q()
setwd("/home/whirldata/Documents/Python_Task/Machine_Learning/Regression")
df<-read.csv("dataset.csv")
head(df)
library(ggplot2)
names(df)<-c("gender","age","head_size","weight_grams")
head(df)
head(df)
ggplot(df, aes(x=head_size, y=mpg)) + geom_point()
ggplot(df, aes(x="head_size", y=mpg)) + geom_point()
ggplot(df, aes(x="head_size", y="weight_grams")) + geom_point()
ggplot(df, aes(x=head_size, y=weight_grams)) + geom_point()
scatter.smooth(x=df$head_size, y=df$weight_grams, main="head_size ~ weight_grams")  # scatterplot
cor(df$head_size,df$weight_grams)
linearMod <- lm(head_size ~ weight_grams, data=df)  # build linear regression model on full data
print(linearMod)
summary(linearMod)
library(ggplot2)
df<-read.csv("dataset.csv")
head(df)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
names(df)<-c("gender","age","head_size","weight_grams")
head(df)
library(ggplot2)
df<-read.csv("dataset.csv")
head(df)
ggplot(df, aes(x=head_size, y=weight_grams)) + geom_point()
ggplot(df, aes(x=head_size, y=weight_grams)) + geom_point()
library(ggplot2)
df<-read.csv("dataset.csv")
head(df)
names(df)<-c("gender","age","head_size","weight_grams")
head(df)
ggplot(df, aes(x=head_size, y=weight_grams)) + geom_point()
library(ggplot2)
df<-read.csv("dataset.csv")
head(df)
names(df)<-c("gender","age","head_size","weight_grams")
head(df)
scatter.smooth(x=df$head_size, y=df$weight_grams, main="head_size ~ weight_grams")  # scatterplot
cor(df$head_size,df$weight_grams)
library(ggplot2)
df<-read.csv("dataset.csv")
head(df)
names(df)<-c("gender","age","head_size","weight_grams")
head(df)
ggplot(df, aes(x=head_size, y=weight_grams)) + geom_point()
scatter.smooth(x=df$head_size, y=df$weight_grams, main="head_size ~ weight_grams")  # scatterplot
cor(df$head_size,df$weight_grams)
linearMod <- lm(head_size ~ weight_grams, data=df)  # build linear regression model on full data
print(linearMod)
summary(linearMod)
q()
